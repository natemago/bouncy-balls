{"version":3,"sources":["bouncyballs/drawables.ts","bouncyballs/animation.ts","bouncyballs/engine.ts","components/Canvas.tsx","components/Settings.tsx","logo.svg","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Vector2D","x","y","mag","this","Math","sqrt","vec","value","other","fx","fy","mul","BaseDrawableObject","position","velocity","acceleration","scale","frame","time","delta","add","mulScalar","Canvas2DrawingProvider","renderingContext","canvasEl","canvas","getContext","undefined","ctx","save","clearRect","width","height","transform","restore","drawables","drawable","push","filter","d","getRenderingContext","beforeRender","forEach","render","e","console","error","afterRender","Specs","fillColor","borderColor","borderWidth","Ball","radius","specs","fillStyle","strokeStyle","beginPath","arc","PI","closePath","fill","stroke","BaseLoop","running","frameTickHandler","lastFrameAt","tickDone","handlers","currentTime","Date","getTime","handler","log","scheduleTick","tick","bind","cancelTick","AnimationLoop","tickFn","self","requestAnimationFrame","onAnimationFrame","isRunning","tickHandler","cancelAnimationFrame","UpdateLoop","fps","interval","setInterval","clearInterval","Engine","settings","drawingProvider","animationLoop","updateLoop","objects","setupWorld","start","addHandler","boundaryCheck","baseObjectsUpdate","bounceBack","collisionPhysics","world","removeFromAnimation","bdo","remove","update","elasticity","bbox","getBoundingBox","correctedVelocity","balls","map","colliding","i","ball","slice","b2","dist","euclidDistace","radDist","diff","vd","sub","scf","pair","b1","m1","m2","c1","c2","v1","dot","v2","stop","w","h","obj","Canvas","props","setCanvas","window","addEventListener","updateCanvasWidthAndHeight","getSize","event","onClick","ev","clientX","clientY","rect","getBoundingClientRect","left","top","ref","c","handleClick","className","React","Component","Pallete","Red","Magenta","Green","Teal","Blue","Yellow","ObjectsSize","Little","Small","Medium","Large","Huge","Settings","state","settingsOpen","onSetSettings","newObjectsPerClick","objectsColor","objectsSize","onClose","values","setState","Object","assign","saveSettings","colorOptions","entries","entry","name","sizeOptions","htmlFor","type","min","max","title","placeholder","onChange","updateState","Number","target","step","App","engine","settingsVisible","updateWorldSize","g","velocityRange","randomVelocity","random","objectsNumber","addObject","createBall","settinsComp","changeSettings","closeSettings","settingOpenIcon","icon","faChevronUp","faChevronDown","src","logo","alt","toggleSettings","faCog","href","faBook","faGithub","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.006de802.chunk.js","sourcesContent":["/**\n * Provides drawing capabilities for rendering {Drawable} objects.\n * Implementations may do the actual rendering in HTML canvas, directly into HTML etc.\n * \n * The provider can handle multiple objects to render. When calling render on this object, all {Drawable}\n * registered with this provider will be rendered.\n */\nexport interface DrawingProvider {\n    /**\n     * Add a {Drawable} object to be rendered by this provider.\n     * @param drawable the object to render.\n     */\n    add(drawable:Drawable):void;\n\n    /**\n     * Remove an object from this provider.\n     * @param drawable the object to remove.\n     */\n    remove(drawable: Drawable):void;\n\n    /**\n     * Render all registered {Drawable} objects.\n     * @param frame current frame number.\n     * @param time current time.\n     * @param delta difference to the previous render time in seconds.\n     */\n    render(frame: number, time: Date, delta: number):void\n}\n\n/**\n * Defines a bounding box around an object. It is a rectangle enclosing the object.\n */\ntype BoundingBox = {\n    /**\n     * Position of the leftmost side of the object bounding box.\n     */\n    x: number,\n\n    /**\n     * Position of the lowermost side of the object bounding box.\n     */\n    y: number,\n\n    /**\n     * Width of the box enclosing the object.\n     */\n    width: number,\n\n    /**\n     * Height of the box enclosing the object.\n     */\n    height: number,\n}\n\n\n/**\n * An object that can be rendered on the screen.\n * \n * To render the object, it must first be registered with a drawing provider. The {DrawingProvider}\n * provides the {RenderingContext} to perform the actual rendering of this drawable object.\n * \n * Additionally, this interface exposes an operation to update the object internal state. As these\n * types of objects would most likely always be used within an animation and update loops, the update\n * method offers abstract way of handling the update of the internal state of the drawable object.\n * \n */\nexport interface Drawable {\n\n    /**\n     * Render this object.\n     * @param ctx the {RenderingContext} provided by the {DrawingProvider}.\n     * @param frame current frame number.\n     * @param time current time.\n     * @param delta difference to the previous render time in seconds.\n     */\n    render(ctx: RenderingContext, frame: number, time: Date, delta: number):void;\n\n    /**\n     * Updates the internal state of the object, for the given frame.\n     * @param frame current frame number.\n     * @param time current time.\n     * @param delta difference to the previous render time in seconds.\n     */\n    update(frame: number, time: Date, delta: number):void;\n\n    /**\n     * Returns the {BoundingBox} of this object. The bounding box is a rectangle\n     * that encloses the object.\n     */\n    getBoundingBox(): BoundingBox\n}\n\n/**\n * @class Represents a 2D vector.\n * \n * Each 2D vector has two components: x and y - positions on the x and y axes accordingly.\n * Additionally each vector has a magnitute, which is the Euclidean distance from the point (x, y)\n * on 2D coordinate system, to the origin point (0, 0) of that system.\n */\nexport class Vector2D {\n\n    /**\n     * Position on the x-axis.\n     */\n    x: number = 0;\n\n    /**\n     * Position on the y-axis.\n     */\n    y: number = 0;\n\n    /**\n     * The magnitude of the vector.\n     * Distance to the origin point (0, 0); always positive.\n     */\n    mag: number = 0;\n\n    /**\n     * Creates new 2D vector for the given coordinates x and y.\n     * @param x the position on the x axis.\n     * @param y the position on the y axis.\n     */\n    constructor(x?:number, y?:number) {\n        if(x) {\n            this.x = x;\n        }\n        if (y) {\n            this.y = y;\n        }\n        this.mag = Math.sqrt(this.x**2 + this.y**2)\n    }\n\n    /**\n     * Add another vector to this vector.\n     * @param vec the vector to add.\n     * @returns {Vector2D} the sum of the two vectors.\n     */\n    add(vec: Vector2D): Vector2D {\n        return new Vector2D(this.x + vec.x, this.y + vec.y)\n    }\n\n    /**\n     * Subtract the given vector from this vector.\n     * @param vec the vector to subtract from this vector.\n     * @returns {Vector2D} the difference of the two vectors: (this - vec).\n     */\n    sub(vec: Vector2D): Vector2D {\n        return new Vector2D(\n            this.x - vec.x,\n            this.y - vec.y\n        )\n    }\n\n    /**\n     * Multiplies the components of this vector by the components of the provided vector.\n     * The result vector will be: (ax*bx, ay*by).\n     * @param vec the vector to multiply with.\n     * @returns {Vector2D} the result of the multiplication.\n     */\n    mul(vec: Vector2D): Vector2D {\n        return new Vector2D(this.x * vec.x, this.y * vec.y)\n    }\n\n    /**\n     * Multiplies this vector by a scalar.\n     * @param value the scalar value to multiply this vector with.\n     * @returns {Vector2D} the result vector of the multiplication by scalar value.\n     */\n    mulScalar(value:number): Vector2D {\n        return new Vector2D(this.x * value, this.y * value)\n    }\n\n    /**\n     * Calculates the Eucledian distance to another vector.\n     * @param other the other vector to calculate distance to.\n     * @returns {number} the Eucledian distance to the other vector. Always positive.\n     */\n    euclidDistace(other:Vector2D): number {\n        return Math.sqrt((this.x - other.x)**2 + (this.y - other.y)**2)\n    }\n\n    /**\n     * Calculates the dot product of this vector with antoher vector.\n     * @param other the vector to calculate the dot product with.\n     * @returns {number} the dot product value.\n     */\n    dot(other:Vector2D): number {\n        return this.x * other.x + this.y * other.y\n    }\n\n    /**\n     * Get the value (magnitude) of this vector.\n     */\n    value(): number {\n        return this.mag\n    }\n\n    /**\n     * Scale the components of this vector by the provided scale factors for each component.\n     * @param fx the scale factor for the x component.\n     * @param fy the scale factor for the y component.\n     * @returns {Vector2D} the scaled vector.\n     */\n    scale(fx: number, fy:number): Vector2D {\n        return this.mul(new Vector2D(fx, fy))\n    }\n}\n\n/**\n * Base class for drawable objects.\n * Defines an internal state for moving objects:\n * <ul>\n * <li>position vector</li>\n * <li>velocity vector</li>\n * <li>acceleration vector</li>\n * <li>scale</li>\n * <ul>\n */\nexport abstract class BaseDrawableObject implements Drawable{\n    /**\n     * The object position in 2D.\n     */\n    position:Vector2D = new Vector2D(0, 0);\n\n    /**\n     * The object velosity in 2D\n     */\n    velocity: Vector2D = new Vector2D(0, 0);\n\n    /**\n     * The object acceleration in 2D\n     */\n    acceleration: Vector2D = new Vector2D(0, 0);\n\n    /**\n     * The scale of the vector values. Default scale is (1, 1).\n     */\n    scale:Vector2D = new Vector2D(1, 1);\n\n    /**\n     * Creates a new {Drawable} object from the given values for position, velocity and acceleration.\n     * @param position the object position.\n     * @param velocity the current velocity of the object.\n     * @param acceleration the current acceleraiton of the object.\n     * @param scale the object scale.\n     */\n    constructor(position?:Vector2D, velocity?:Vector2D, acceleration?: Vector2D, scale?: Vector2D) {\n        this.position = position?? this.position;\n        this.velocity = velocity?? this.velocity;\n        this.acceleration = acceleration?? this.acceleration;\n        this.scale = scale?? this.scale;\n    }\n\n    /**\n     * Updates the object position based on its velocity, and the velocity based on the acceleration, based\n     * on the elapsed time (delta).\n     * @param frame current frame.\n     * @param time current frame time.\n     * @param delta the elapsed time since the last update (in seconds).\n     */\n    update(frame: number, time: Date, delta: number):void {\n        this.position = this.position.add(this.velocity.mulScalar(delta))\n        this.velocity = this.velocity.add(this.acceleration.mulScalar(delta))\n    }\n\n    abstract render(ctx: RenderingContext, frame: number, time: Date, delta: number):void;\n    abstract getBoundingBox(): BoundingBox\n    \n}\n\n/**\n * Base class for drawing providers.\n * \n * Implements the management of the drawable objects, such as adding and removing of objects.\n * \n * Implements the general render cycle for the objects.\n */\nexport abstract class BaseDrawingProvider implements DrawingProvider {\n    drawables: Drawable[] = [];\n\n\n    add(drawable: Drawable): void {\n        this.drawables.push(drawable);\n    }\n\n    remove(drawable: Drawable): void {\n        this.drawables = this.drawables.filter(d => d !== drawable)\n    }\n\n    render(frame: number, time: Date, delta: number): void {\n        const ctx = this.getRenderingContext()\n        if(!ctx) {\n            console.error('Rendering context not available. Will not render.')\n            return \n        }\n        this.beforeRender(ctx)\n\n\n        this.drawables.forEach(drawable => {\n            try {\n                drawable.render(ctx, frame, time, delta);\n            } catch(e) {\n                console.error('Failed to draw', drawable, '; error:', e)\n            }\n        })\n\n        this.afterRender(ctx)\n    }\n\n    /**\n     * Called before the actual rendering of the drawable objects starts, but after the RenderingContext has\n     * been set.\n     * @param ctx the current rendering context.\n     */\n    protected beforeRender(ctx: RenderingContext):void {\n\n    }\n\n    /**\n     * Called after all drawable object have been rendered.\n     * @param ctx the current rendering context.\n     */\n    protected afterRender(ctx: RenderingContext):void {\n\n    }\n\n    /**\n     * Get the current rendering context, if available.\n     * \n     * @returns the built {RenderingContext} if available, otherwise undefined.\n     */\n    abstract getRenderingContext(): RenderingContext | undefined;\n\n}\n\n\n/**\n * DrawingProvider that renders drawable objects on an HTML Canvas element.\n */\nexport class Canvas2DrawingProvider extends BaseDrawingProvider {\n    \n    private renderingContext?: CanvasRenderingContext2D;\n    private canvasEl?: HTMLCanvasElement;\n\n    /**\n     * Set the underlying canvas element.\n     * @param canvas the HTML canvas element on which to render the objects.\n     */\n    setCanvas(canvas: HTMLCanvasElement): void {\n        this.canvasEl = canvas;\n        this.renderingContext = canvas.getContext(\"2d\")?? undefined\n    }\n\n    /**\n     * Returns the underlying RenderingContext obtained from the canvas element.\n     */\n    getRenderingContext(): RenderingContext | undefined {\n        return this.renderingContext;\n    }\n\n    /**\n     * Pushes the current context state on stack, then clears the canvas to render the objects anew.\n     * The underlying context is transformed, so that the y axis points upwards (instead of downwards as by default).\n     * @param ctx the canvas 2D rendering context.\n     */\n    beforeRender(ctx: CanvasRenderingContext2D):void {\n        if (!this.canvasEl) {\n            return\n        }\n        ctx.save()\n        ctx.clearRect(0, 0, this.canvasEl.width, this.canvasEl.height)\n        ctx.transform(1, 0, 0, -1, 0, this.canvasEl.height)  // -1 scale the y axis, thus flip over\n    }\n\n    /**\n     * Restores the original state of the canvas 2d rendering context.\n     * @param ctx the canvas 2D rendering context.\n     */\n    afterRender(ctx: CanvasRenderingContext2D) {\n        ctx.restore()\n    }\n}\n\n\n/**\n * Object UI specification: fill color, border color and border width.\n */\nexport class Specs {\n    fillColor: string;\n    borderColor: string;\n    borderWidth: number;\n\n    constructor(fillColor: string, borderColor: string, borderWidth: number) {\n        this.fillColor = fillColor;\n        this.borderColor = borderColor;\n        this.borderWidth = borderWidth;\n    }\n}\n\n\n/**\n * Drawable ball (circle) object.\n */\nexport class Ball extends BaseDrawableObject {\n\n    radius: number = 0;\n    specs: Specs;\n\n    /**\n     * Construct a new ball with the given specifications.\n     * @param radius the ball (circle) radius.\n     * @param specs the UI specifications.\n     * @param position current position.\n     * @param velocity current velocity.\n     * @param acceleration current acceleration.\n     * @param scale current scale (default (1, 1))\n     */\n    constructor(radius: number, specs: Specs, position?:Vector2D, velocity?:Vector2D, acceleration?: Vector2D, scale?: Vector2D) {\n        super(position, velocity, acceleration, scale)\n        this.radius = radius;\n        this.specs = specs;\n    }\n\n\n    /**\n     * Renders a circle on the canvas 2D rendering context.\n     * @param ctx \n     * @param frame \n     * @param time \n     * @param delta \n     */\n    render(ctx: CanvasRenderingContext2D, frame: number, time: Date, delta: number): void {\n        if(this.radius <= 0) {\n            return\n        }\n        ctx.save()\n\n        ctx.fillStyle = this.specs.fillColor\n        ctx.strokeStyle = this.specs.borderColor\n\n        ctx.beginPath()\n        ctx.arc(this.position.x + this.radius, this.position.y + this.radius, this.radius, 0, 2*Math.PI)\n        ctx.closePath()\n        ctx.fill()\n        if (this.specs.borderWidth) {\n            ctx.stroke()\n        }\n\n        ctx.restore()\n    }\n\n    /**\n     * Returns the bounding box enclosing this circle.\n     */\n    getBoundingBox(): BoundingBox {\n        return {\n            x: this.position.x,\n            y: this.position.y,\n            width: this.radius * 2,\n            height: this.radius * 2,\n        }\n    }\n\n}","/**\n * Handler that is being called inside a loop. This type of handler is being called on each tick of the loop\n * with relevant tick metrics.\n * \n * @param frame the frame number. Starts from 1.\n * @param time current frame time (a Date object).\n * @param delta, a number, the time difference from the previous tick in seconds.\n */\nexport interface LoopTickHandler {\n    (frame: number, time: Date, delta: number): void;\n};\n\n/**\n * A loop that executes handlers (LoopTickHandler) periodically.\n * The handlers are usually executed multiple times per second.\n */\nexport interface Loop {\n    /**\n     * Starts the loop, if not running.\n     */\n    start(): void;\n\n    /**\n     * Stopts the loop, if running.\n     */\n    stop(): void;\n\n    /**\n     * Check if this loop is running.\n     * \n     * @returns boolean true if the loop is running, otherwise false.\n     */\n    isRunning(): boolean;\n\n    /**\n     * Adds a handler to the list of handlers to be executed per tick.\n     * @param handler the handler to be added to this loop.\n     */\n    addHandler(handler: LoopTickHandler): void;\n}\n\n\n/**\n * Implements the basic properties of a loop, like adding and managing handlers, setup and teardown per tick.\n */\nexport abstract class BaseLoop implements Loop{\n    private running: boolean = false;\n    protected frameTickHandler?: number;\n    private frame: number = 0;\n    private lastFrameAt?: Date;\n    private tickDone:boolean = true;\n    \n    protected handlers: LoopTickHandler[] = [];\n\n    /**\n     * One tick of the loop.\n     * This is the main function that is called when the loop is running, usually multiple times per second.\n     */\n    tick(): void {\n        if (!this.running) {\n            return\n        }\n\n        const frame = this.frame + 1;\n        const currentTime = new Date();\n        const delta = (this.lastFrameAt ? currentTime.getTime() - this.lastFrameAt?.getTime() : 0) / 1000;  // seconds instead of milliseconds\n        this.handlers.forEach(handler => {\n            try{\n                handler(frame, currentTime, delta);\n            }catch(e) {\n                console.log('Error:', e, 'at handler:', handler);\n            }\n        })\n        this.lastFrameAt = currentTime\n    }\n\n    /**\n     * Starts the loop.\n     * \n     * Sets up a handler for the 'tick' function, that schedules it to run periodically.\n     */\n    start(): void {\n        if(this.running) {\n            return\n        }\n        this.running = true;\n        this.lastFrameAt = new Date()\n        this.frameTickHandler = this.scheduleTick(this.tick.bind(this));\n    }\n\n    /**\n     * Stops the loop.\n     * \n     * Clears the handler for the 'tick' function and marks this loop as not running.\n     */\n    stop(): void {\n        if(!this.running) {\n            return;\n        }\n        if(this.frameTickHandler){\n            this.cancelTick(this.frameTickHandler);\n        }\n        this.running = false\n    }\n\n    isRunning(): boolean {\n        return this.running;\n    }\n\n    addHandler(handler: LoopTickHandler): void {\n        this.handlers.push(handler);\n    }\n\n\n    /**\n     * Schedule a function to run periodically.\n     * \n     * This is called in BaseLoop.start to schedule the execution of the BaseLoop.tick function. This is\n     * abstracted to allow for different implementations of scheduling the periodic 'tick', such as with\n     * requestAnimationFrame or setInterval.\n     * \n     * @param tickFn the 'tick' function to be scheduled to run periodically.\n     */\n    abstract scheduleTick(tickFn: Function): number;\n\n    /**\n     * Cancel the given periodic execution of the tick function, by the given tickHandler.\n     * \n     * This is called in BaseLoop.stop to cancel the scheduled periodic execution of the 'tick' function.\n     * @param tickHandler the handler for the schedule of the 'tick' function. Depending on implementation this\n     * could be the setInterval handler, requestAnimationFrame handler or other, if different underlying implementation\n     * is used.\n     */\n    abstract cancelTick(tickHandler:number): void;\n\n}\n\n/**\n * A loop for animations.\n * \n * This implementation uses 'requestAnimationFrame' internally to schedule and run the tick function.\n * \n * This implementation is intended to be used for visual animations, as 'requestAnimationFrame' may not be\n * called when the browser/tab is not in view.\n * \n * The frame rate cannot be set directly, as it depends on the actual browser implementation of 'requestAnimationFrame'.\n */\nexport class AnimationLoop extends BaseLoop {\n\n    /**\n     * Schedules the periodic execution of the given function using 'requestAnimationFrame'.\n     * @param tickFn the function to be scheduled to run periodically.\n     */\n    scheduleTick(tickFn: Function): number {\n        const self = this;\n\n        const onAnimationFrame = function(time: number) {\n            tickFn()\n            if(self.isRunning()) {\n                self.frameTickHandler = requestAnimationFrame(onAnimationFrame);\n            }\n        }\n\n        return requestAnimationFrame(onAnimationFrame);\n    }\n\n    /**\n     * Cancels the execution of the scheduled function using 'cancelAnimationFrame'.\n     * @param tickHandler the handler for the scheduled function.\n     */\n    cancelTick(tickHandler: number): void {\n        if(this.frameTickHandler){\n            cancelAnimationFrame(this.frameTickHandler);\n        }\n    }\n\n}\n\n/**\n * A loop for periodic update of the state of the objects.\n * \n * This implementation uses 'setInterval' internally to schedule the execution of the handlers at a given\n * frame rate (FPS). The handlers will be executed always while this loop is running.\n */\nexport class UpdateLoop extends BaseLoop {\n\n    fps: number = 60;\n\n    /**\n     * Create new UpdateLoop instance with a given frame rate (frames per second).\n     * @param fps frame rate in frames-per-second.\n     */\n    constructor(fps: number) {\n        super();\n        this.fps = fps;\n    }\n\n    /**\n     * Schedules the execution of the 'tick' function at a pre-defined frame rate.\n     * @param tickFn the function to be scheduled to execute at a given frame rate.\n     */\n    scheduleTick(tickFn: Function): number {\n        const interval = 1000/this.fps;\n        return setInterval(tickFn, interval);\n    }\n\n    /**\n     * Cancels the execution of the given handler.\n     * @param tickHandler the scheduled function handler.\n     */\n    cancelTick(tickHandler: number): void {\n        clearInterval(tickHandler);\n    }\n}","import {AnimationLoop, UpdateLoop, Loop} from './animation'\nimport {Vector2D, DrawingProvider, Drawable, BaseDrawableObject, Ball} from './drawables'\n\n/**\n * Engine and world settings, such as elasticiy, world width/height and frames per second.\n */\nexport type EngineSettings = {\n    fps: number,\n    world: {\n        width: number,\n        height: number,\n    },\n    elasticity: number,\n}\n\n/**\n * The main object orchestraing the rendering of objects and updating their states.\n * \n * The engine contains all objects that sould be rendered on the screen (via the drawing provider)\n * and handles the upating of the state of each object. It applies handlers that check for collision\n * detection, bouncing back from the floor and state (position/velocity) update of the objects.\n */\nexport class Engine {\n\n    animationLoop: Loop;\n    updateLoop: Loop;\n    settings: EngineSettings;\n    drawingProvider: DrawingProvider;\n    objects: Drawable[] = []\n\n    /**\n     * Creates a new Engine.\n     * @param settings the engine settings\n     * @param drawingProvider a {DrawingProvider} to use for rendering of the objects.\n     */\n    constructor(settings: EngineSettings, drawingProvider: DrawingProvider) {\n        this.settings = settings\n        this.animationLoop = new AnimationLoop()\n        this.updateLoop = new UpdateLoop(settings.fps)\n        this.drawingProvider = drawingProvider\n    }\n\n    /**\n     * Starts the engine.\n     * \n     * Basically starts the animation and update loops.\n     */\n    start():void {\n        this.setupWorld()\n        this.updateLoop.start()\n        this.animationLoop.start()\n    }\n\n    /**\n     * Does a setup of the world: add handlers to the update loop and registers the render handler of the\n     * drawing provider with the animation loop.\n     */\n    setupWorld():void {\n        this.updateLoop.addHandler(this.boundaryCheck.bind(this))\n        this.updateLoop.addHandler(this.baseObjectsUpdate.bind(this))\n        this.updateLoop.addHandler(this.bounceBack.bind(this))\n        this.updateLoop.addHandler(this.collisionPhysics.bind(this))\n        // setup the rendering\n        this.animationLoop.addHandler(this.drawingProvider.render.bind(this.drawingProvider))\n    }\n\n    /**\n     * Update state handler to check if the objects are still visible, and to remove those objects that\n     * are invisible and will probably never come back in the world (such as balls rolling off to the left and right).\n     * \n     * The objects are removed from the list and also are removed from the drawing provider to not render them.\n     * \n     * @param frame current frame.\n     * @param time current time.\n     * @param delta elapsed time from the previous update frame.\n     */\n    boundaryCheck(frame: number, time:Date, delta:number):void {\n        const {width} = this.settings.world\n        const removeFromAnimation:Drawable[] = []\n        this.objects = this.objects.filter(drawable => {\n            if(drawable instanceof BaseDrawableObject) {\n                const bdo = drawable as BaseDrawableObject\n                const {x} = bdo.position\n                \n                if ((x < 0 && bdo.velocity.x < 0) || (x > width && bdo.velocity.x > 0)) {\n                    removeFromAnimation.push(drawable)\n                    return false\n                }\n                return true\n            }\n            return false\n        })\n        const drawingProvider = this.drawingProvider\n        removeFromAnimation.forEach(drawable => drawingProvider.remove(drawable))\n    }\n\n    /**\n     * Calls the 'update' method on every managed Drawable object.\n     * \n     * This updates the position and velocity of each object.\n     *\n     * @param frame current frame.\n     * @param time current time.\n     * @param delta elapsed time from the previous update frame.\n     */\n    baseObjectsUpdate(frame: number, time:Date, delta:number): void {\n        this.objects.forEach(drawable => {\n            drawable.update(frame, time, delta)\n        })\n    }\n\n    /**\n     * Update loop hander to check if an object should bounce back from the floor.\n     * \n     * When an object bounces back, the y-component of the velocity is flipped and the\n     * position of the object on the y-axis is corrected (if the object is bellow the floor\n     * is it put back on the floor at y=0).\n     * \n     * @param frame current frame.\n     * @param time current time.\n     * @param delta elapsed time from the previous update frame.\n     */\n    bounceBack(frame: number, time:Date, delta:number): void {\n        const {elasticity} = this.settings\n        this.objects.forEach(drawable => {\n            if (drawable instanceof BaseDrawableObject) {\n                const bdo = drawable as BaseDrawableObject\n                const bbox = bdo.getBoundingBox()\n                if (bbox.y <= 0) {\n                    bdo.position = new Vector2D(bdo.position.x, 0)\n\n                    let correctedVelocity = bdo.velocity.y\n                    if (bbox.y < 0) {\n                        correctedVelocity = correctedVelocity - bdo.acceleration.y*delta\n                    }\n                    \n                    bdo.velocity = new Vector2D(bdo.velocity.x, - (correctedVelocity)*elasticity)\n                }\n            }\n        })\n    }\n\n    /**\n     * Update loop handler that provides collision detection and performs an ideal elastic collision between the colliding balls.\n     * \n     * After it detects a collision between two balls, it calculates the resulting velocities of the colision and corrects\n     * the position of the second ball in the case when the two balls are overlapping.\n     * \n     * @param frame current frame.\n     * @param time current time.\n     * @param delta elapsed time from the previous update frame.\n     */\n    collisionPhysics(frame: number, time:Date, delta:number):void {\n        const balls:Ball[] = this.objects.filter(d => d instanceof Ball).map(d => d as Ball);\n        const colliding: [Ball, Ball][] = []\n\n        balls.forEach((d, i) => {\n            const ball = d as Ball\n            balls.slice(i+1).forEach(b2 => {\n                const dist = ball.position.euclidDistace(b2.position)\n                const radDist = ball.radius + b2.radius\n                if (dist <= radDist) { // colision\n                    colliding.push([ball, b2])\n                    if (dist < radDist) { // fix the overlapping balls\n                        const diff = radDist - dist\n                        const vd = b2.position.sub(ball.position)\n                        const scf = (vd.mag + diff) / vd.mag\n                        b2.position = vd.scale(scf, scf).add(ball.position)\n                    }\n                }\n            })\n        })\n\n        colliding.forEach(pair => {\n            const [b1, b2] = pair\n            const m1 = b1.radius**3 // mass proprtional to volume, volume is proportional to the 3rd power of the radius\n            const m2 = b2.radius**3\n            const c1 = b1.position.add(new Vector2D(b1.radius, b1.radius))\n            const c2 = b2.position.add(new Vector2D(b2.radius, b2.radius))\n\n            // Calculate the resulting velocity for an ideal elastic collision, using the following equations:\n            // \n            //               2*m2   <v1 - v2, x1 - x2>\n            //  v1' = v1 -  ⎯⎯⎯⎯ ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ (x1 - x2)\n            //              m1 + m2    ||x1 - x2||^2\n            // \n\n            // \n            //               2*m1   <v2 - v1, x2 - x1>\n            //  v2' = v2 -  ⎯⎯⎯⎯ ⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯ (x2 - x1)\n            //              m1 + m2    ||x2 - x1||^2\n            // \n            // \n            // Where:\n            //   - v1 - is the initial velocity of the first ball\n            //   - v1' - is the velocity of the first ball after the collision\n            //   - v2 - is the initial velocity of the second ball\n            //   - v2' - is the velocity of the second ball after the collision\n            //   - m1 - is the mass of the first ball\n            //   - m2 - is the mass of the second ball\n            //   - x1 - is the position of the center of the first ball (vector)\n            //   - x2 - is the position of the center of the second ball (vector)\n            //   - <x1, x2> - represents the dot product of x1 and x2\n            //   - ||vec|| - represents the magnitude of a vector\n\n            const v1 = b1.velocity.sub(c1.sub(c2).mulScalar(b1.velocity.sub(b2.velocity).dot(c1.sub(c2)) / (c1.sub(c2).value()**2)).mulScalar((2*m2)/(m1+m2)))\n            const v2 = b2.velocity.sub(c2.sub(c1).mulScalar(b2.velocity.sub(b1.velocity).dot(c2.sub(c1)) / (c2.sub(c1).value()**2)).mulScalar((2*m1)/(m1+m2)))\n\n            b1.velocity = v1\n            b2.velocity = v2\n        })\n    }\n\n    /**\n     * Stops the update and the animation loops.\n     */\n    stop():void {\n        this.animationLoop.stop()\n        this.updateLoop.stop()\n    }\n\n    /**\n     * Updates the world size to new values.\n     * \n     * Can be called while the engine is running.\n     * \n     * @param w the new width of the world.\n     * @param h the new height of the world.\n     */\n    updateWorldSize(w: number, h: number): void {\n        this.settings.world = {\n            width: w,\n            height: h\n        }\n    }\n\n    /**\n     * Add another Drawable object to this engine.\n     * @param obj the object to be added.\n     */\n    addObject(obj:Drawable): void {\n        this.drawingProvider.add(obj)\n        this.objects.push(obj)\n    }\n}","import React from 'react';\nimport {Canvas2DrawingProvider} from '../bouncyballs/drawables';\n\nimport './Canvas.css'\n\n/**\n * Canvas component properties.\n */\ntype CanvasProps = {\n    /**\n     * Reference to the DrawingProvider\n     */\n    drawingProvider: Canvas2DrawingProvider,\n\n    /**\n     * Handler for click events on the underlying canvas element.\n     * The x and y coordinates of the click are corrected to be relative to\n     * the unserlying canvas, as opposed to an absolute postion on the browser\n     * viewport.\n     */\n    onClick?: (event: CanvasMouseEvent) => void,\n}\n\n/**\n * Canvas component state type.\n */\ntype CanvasState = {}\n\n/**\n * Wrapper for a mouse event on the canvas.\n * Contains the original event and corrected x and y coordinates of the event\n * to the relative position of the canvas element.\n */\nexport type CanvasMouseEvent = {\n    x: number,\n    y: number,\n    event: React.MouseEvent,\n}\n\n/**\n * Canvas component that manages an underlying HTML canvas element.\n * \n * Binds the canvas to the Canvas2DrawingProvider as the underlying screen for\n * rendering Drawable objects.\n */\nexport default class Canvas extends React.Component<CanvasProps, CanvasState> {\n    \n    drawingProvider?: Canvas2DrawingProvider\n    canvas?: HTMLCanvasElement | null\n\n    constructor(props:any) {\n        super(props)\n        this.drawingProvider = this.props.drawingProvider;\n    }\n\n    componentDidMount() {\n        if(this.drawingProvider && this.canvas) {\n            this.drawingProvider.setCanvas(this.canvas)\n        }\n        \n        window.addEventListener('resize', this.updateCanvasWidthAndHeight.bind(this))\n        this.updateCanvasWidthAndHeight()\n    }\n\n    componentDidUpdate() {\n        if(this.drawingProvider && this.canvas) {\n            this.drawingProvider.setCanvas(this.canvas)\n        }\n    }\n\n    /**\n     * Updates the canvas element width and height properties to the actual\n     * size of the canvas. This enables rescaling the canvas to the correct\n     * propertions when the size of the canvas is regulated through CSS style.\n     */\n    updateCanvasWidthAndHeight() {\n        if (this.canvas) {\n            const [width, height] = this.getSize()\n            this.canvas.width = width?? 0\n            this.canvas.height = height?? 0\n        }\n    }\n\n    /**\n     * Handle a click on the canvas.\n     * \n     * Wraps the event, corrects the x and y coordinated of the click, then calls the onClick hander\n     * of the component.\n     * @param event the actual event received from the canvas element.\n     */\n    handleClick(event: React.MouseEvent) {\n        if(this.props.onClick) {\n            const ev = {\n                x: event.clientX,\n                y: event.clientY,\n                event\n            }\n            const rect = this.canvas?.getBoundingClientRect()\n            if(rect) {\n                ev.x -= rect.left\n                ev.y -= rect.top\n            }\n            this.props.onClick(ev)\n        }\n    }\n\n    /**\n     * Returns the actual size of the canvas element in the DOM.\n     */\n    getSize() {\n        const rect = this.canvas?.getBoundingClientRect()\n        return [rect?.width, rect?.height]\n    }\n\n    render() {\n        return <canvas ref={(c) => this.canvas = c} onClick={this.handleClick.bind(this)} className=\"drawing-canvas\"></canvas>\n    }\n}","import React from 'react'\n\nimport './Settings.css'\n\n/**\n * Settings values exposed type.\n */\nexport type SettingsValues = {\n    newObjectsPerClick: number,\n    objectsColor: string,\n    objectsSize: number,\n    elasticity: number,\n}\n\n\n/**\n * Settings component state type.\n */\ntype SettingsState = {\n    newObjectsPerClick: number,\n    objectsColor: string,\n    objectsSize: number,\n    elasticity: number,\n    settingsOpen: boolean,\n}\n\n/**\n * Settings component props type.\n */\ntype SettingsProps = {\n    /**\n     * The initial settings for the settings panel.\n     */\n    settings: SettingsValues,\n\n    /**\n     * Called when the settings have changed with the updated settings.\n     */\n    onSetSettings?: (settings: SettingsValues)=> void\n\n    /**\n     * Called when the panel have been closed.\n     */\n    onClose?: ()=>void\n}\n\n/**\n * Objects colors pallete to choose from.\n */\nexport const Pallete = {\n    Red: \"#c4014c\",\n    Magenta: \"#f3008e\",\n    Green: \"#00b84c\",\n    Teal: \"#008c9e\",\n    Blue: \"#004a9e\",\n    Yellow: \"#ebe712\"\n}\n\n/**\n * Objects sizes to choose from.\n */\nexport const ObjectsSize = {\n    Little: 7,\n    Small: 10,\n    Medium: 20,\n    Large: 25,\n    Huge: 50,\n}\n\n\n/**\n * A settings pannel to control the values for the drawable objects and the rendering engine.\n */\nexport default class Settings extends React.Component<SettingsProps, SettingsState> {\n\n    constructor(props: SettingsProps) {\n        super(props)\n        const settings = props.settings\n        this.state = {\n            settingsOpen: false,\n            ...settings\n        }\n    }\n\n    saveSettings():void {\n        const state = this.state\n        if(this.props.onSetSettings) {\n            this.props.onSetSettings({\n                newObjectsPerClick: state.newObjectsPerClick,\n                objectsColor: state.objectsColor,\n                objectsSize: state.objectsSize,\n                elasticity: state.elasticity,\n            })\n        }\n    }\n\n    closeSettings(): void {\n        if(this.props.onClose) {\n            this.props.onClose()\n        }\n    }\n\n    updateState(values: any) {\n        this.setState(Object.assign(this.state, values))\n        this.saveSettings()\n    }\n\n    toggleSettings() {\n        const state = this.state\n        this.setState(Object.assign(this.state, {\n            settingsOpen: !state.settingsOpen\n        }))\n    }\n\n    render():any {\n        const state = this.state\n        const colorOptions = Object.entries(Pallete).map((entry=> {\n            const [name, value] = entry\n            return <option value={value} >{name}</option>\n        }))\n        const sizeOptions = Object.entries(ObjectsSize).map(entry => {\n            const [name, value] = entry\n            return <option value={value} >{name}</option>\n        })\n        return (\n            <div className=\"settings\">\n                <div className=\"settings-form\">\n                    <div className=\"input-group\">\n                        <label htmlFor=\"objects-per-click\">Objects per click</label>\n                        <input \n                            name=\"objects-per-click\" \n                            type=\"number\" \n                            value={state.newObjectsPerClick} \n                            min=\"1\" \n                            max=\"500\" \n                            title=\"Number of objects to create per single click.\"\n                            placeholder=\"Number of objects\"\n                            onChange={e => this.updateState({\n                                newObjectsPerClick: Number(e.target.value)\n                            })}></input>\n                    </div>\n                    <div className=\"input-group\">\n                    <label htmlFor=\"objects-color\">Objects color</label>\n                        <select \n                            name=\"objects-color\" \n                            value={state.objectsColor} \n                            title=\"The color of the newly created objects.\"\n                            placeholder=\"Select a color from the list\"\n                            onChange={e => this.updateState({\n                                objectsColor: e.target.value\n                            })}>\n                            {colorOptions}\n                        </select>\n                    </div>\n                    <div className=\"input-group\">\n                    <label htmlFor=\"objects-size\">Objects size</label>\n                        <select \n                            name=\"objects-size\"\n                            value={state.objectsSize}\n                            title=\"Approximate size of the newly created objects.\"\n                            placeholder=\"Select the approximate size of the objects.\"\n                            onChange={e => this.updateState({\n                                objectsSize: Number(e.target.value)\n                            })}>\n                            {sizeOptions}\n                        </select>\n                    </div>\n                    <div className=\"input-group\">\n                    <label htmlFor=\"elasticity\">Elasticity</label>\n                        <input \n                            name=\"elasiticity\" \n                            type=\"number\" \n                            min=\"0\" \n                            max=\"1\" \n                            step=\"0.01\" \n                            title=\"How elastic should the collision should be. 1 - completely elastic; 0 - will not bounce at all.\"\n                            placeholder=\"Choose a value between 0 and 1 (for example 0.7).\"\n                            value={this.state.elasticity} onChange={e => this.updateState({\n                                elasticity: Number(e.target.value)\n                            })}></input>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","export default __webpack_public_path__ + \"static/media/logo.7b4ef71f.svg\";","import React from 'react';\n\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faCog, faBook, faChevronUp, faChevronDown} from '@fortawesome/free-solid-svg-icons'\nimport {faGithub} from '@fortawesome/free-brands-svg-icons'\n\n\nimport {Canvas2DrawingProvider, Ball, Specs, Vector2D} from './bouncyballs/drawables'\nimport {Engine} from './bouncyballs/engine'\n\nimport Canvas, {CanvasMouseEvent} from './components/Canvas'\nimport Settings, {SettingsValues, Pallete, ObjectsSize} from './components/Settings'\n\nimport logo from './logo.svg';\nimport './App.css';\n\n\ntype AppState = {\n  settingsVisible: boolean,\n  settings: SettingsValues,\n}\n\ntype AppProps = {}\n\n/**\n * Main app component class.\n * \n * Initializes the drawing engine, adds the Canvas and the Settings pannel.\n */\nclass App extends React.Component<AppProps, AppState> {\n\n  drawingProvider: Canvas2DrawingProvider\n  canvas?: Canvas | null\n\n  engine: Engine\n\n\n  constructor(props:any) {\n    super(props)\n    this.drawingProvider = new Canvas2DrawingProvider()\n    const settings = {\n      elasticity: 0.7,\n        newObjectsPerClick: 5,\n        objectsColor: Pallete.Red,\n        objectsSize: ObjectsSize.Medium,\n    }\n    this.state = {\n      settingsVisible: false,\n      settings: settings,\n    }\n    this.engine = new Engine({\n      fps: 60,\n      world: {\n        width: 0,\n        height: 0,\n      },\n      elasticity: settings.elasticity,\n    }, this.drawingProvider)\n  }\n\n  componentDidMount(){\n    const updateWorldSize = this.updateWorldSize.bind(this)\n    window.addEventListener('resize', ev => {\n      updateWorldSize()\n    })\n    updateWorldSize()\n    //this.engine.start()\n  }\n\n  updateWorldSize() {\n    const [width, height] = this.canvas?.getSize()?? [0, 0]\n    this.engine.updateWorldSize(width?? 0, height?? 0)\n    console.log('Update world size to:', width, height)\n  }\n  \n  createBall(x: number, y: number) {\n    const {settings} = this.state\n    const position = new Vector2D(x, y)\n    const g = new Vector2D(0, 150*-9.81)\n    const velocityRange = 400\n    const randomVelocity = new Vector2D(Math.random()*velocityRange - velocityRange/2, Math.random()*velocityRange - velocityRange/2)\n    return new Ball(\n      settings.objectsSize/2 + Math.random()*(settings.objectsSize/2),\n      new Specs(settings.objectsColor, 'black', 1),\n      position, \n      randomVelocity, \n      g)\n  }\n\n  onClick(e: CanvasMouseEvent) {\n    let objectsNumber = this.state.settings.newObjectsPerClick\n    let y = this.engine.settings.world.height - e.y\n    while(objectsNumber) {\n      this.engine.addObject(this.createBall(e.x, y))\n      objectsNumber--\n    }\n  }\n\n  changeSettings(settings: SettingsValues) {\n    this.setState(Object.assign(this.state, {\n      settings: settings\n    }))\n    this.engine.settings.elasticity = settings.elasticity\n  }\n\n  toggleSettings() {\n    this.setState(Object.assign(this.state, {\n      settingsVisible: !this.state.settingsVisible\n    }))\n  }\n\n  closeSettings():void {\n    this.setState(Object.assign(this.state, {\n      settingsVisible: false\n    }))\n  }\n\n  render(){\n    const settinsComp = this.state.settingsVisible ? <Settings settings={this.state.settings} onSetSettings={this.changeSettings.bind(this)} onClose={this.closeSettings.bind(this)}></Settings> : <></>\n    const settingOpenIcon = this.state.settingsVisible ? <FontAwesomeIcon icon={faChevronUp} /> : <FontAwesomeIcon icon={faChevronDown}/>\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\" title=\"Click anywhere on the screen :)\">\n          <div className=\"header-menu\">\n            <div className=\"logo-wrap\">\n            <img src={logo} alt=\"logo\" className=\"logo\"/>\n            </div>\n            <div className=\"header-title\">\n              <h1>Bouncy Balls</h1>\n            </div>\n            <div className=\"header-actions header-docitem\">\n    <button onClick={this.toggleSettings.bind(this)} className=\"header-button\" title=\"Click here to change the settings\"><FontAwesomeIcon icon={faCog}></FontAwesomeIcon> <label>Settings</label> {settingOpenIcon}</button>\n            </div>\n            <div className=\"header-docitem\">\n              <a href=\"docs\" className=\"header-button\" title=\"Check out the docs!\"><FontAwesomeIcon icon={faBook} /> <label>Docs</label></a>\n              <a href=\"https//github.com/natemago/bouncy-balls\" className=\"header-button\" title=\"Visit the source code repository on Github!\"><FontAwesomeIcon icon={faGithub} /></a>\n            </div>\n          </div>\n          {settinsComp}\n        </header>\n        <section className=\"main-section\">\n          <Canvas drawingProvider={this.drawingProvider} onClick={this.onClick.bind(this)} ref={(c) => this.canvas = c}></Canvas>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n ","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}